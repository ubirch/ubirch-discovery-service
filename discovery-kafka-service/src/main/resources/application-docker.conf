include "application.base.conf"

core {

  connector {

    hosts = ${DISC_ENV_CORE_HOSTS}
    port = ${DISC_ENV_CORE_PORT}

    connectionPool {
      reconnectInterval = ${DISC_ENV_CORE_COONPOOL_RECONINTERVAL}
      maxWaitForConnection = ${DISC_ENV_CORE_COONPOOL_MAXWAITCONNECTION}
    }

  }

  metrics {
    prometheus {
      port = ${DISC_ENV_KAFKA_PROMETHEUS}
    }
  }
}

kafkaApi {

  kafkaConsumer {
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${DISC_ENV_KAFKA_CONS_BOOTSTRAP}
    // subscribe to topic "test" for... testing purposes
    topic = ${DISC_ENV_KAFKA_CONS_TOPIC}
    //If empty, a group id will be created.
    groupId = ${DISC_ENV_KAFKA_CONS_GROUPID}

    errorTopic = ${DISC_ENV_KAFKA_CONS_ERRORTOPIC}
    gracefulTimeout = ${DISC_ENV_KAFKA_CONS_TIMEOUT}
    maxPoolRecords = ${DISC_ENV_KAFKA_CONS_POOLREC}


  }

  kafkaProducer {
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${DISC_ENV_KAFKA_PROD_BOOTSTRAP}
    errorTopic = ${DISC_ENV_KAFKA_PROD_ERRORTOPIC}
    topic = ${DISC_ENV_KAFKA_PROD_TOPIC}
    gracefulTimeout = ${DISC_ENV_KAFKA_PROD_TIMEOUT}

  }

  gremlinConf {
    asynchronousBatchSize = ${DISC_ENV_KAFKA_GREM_ASYNC}
  }

  metrics {
    prometheus {
      port = ${DISC_ENV_KAFKA_PROMETHEUS}
      namespace = ${DISC_ENV_KAFKA_PROMETHEUS_NAMESPACE}
    }
  }

}
