include "application.base.conf"

flush = ${DISC_ENV_FLUSH}

core {

  threads = ${DISC_ENV_CORE_THREADS}

  connector {

    hosts = ${DISC_ENV_CORE_HOSTS}
    port = ${DISC_ENV_CORE_PORT}

    //use -1 to use default
    nioPoolSize = ${DISC_ENV_CORE_NIO_POOL_SIZE} //default is available processors
    //use -1 to use default
    workerPoolSize = ${DISC_ENV_CORE_WORKER_POOL_SIZE} //default available processors * 2

    connectionPool {
      //use -1 to use default
      maxSize = ${DISC_ENV_CORE_COONPOOL_MAX_SIZE}
      minSize = ${DISC_ENV_CORE_COONPOOL_MIN_SIZE}
      reconnectInterval = ${DISC_ENV_CORE_COONPOOL_RECONINTERVAL}
      maxWaitForConnection = ${DISC_ENV_CORE_COONPOOL_MAXWAITCONNECTION}
    }

  }

  metrics {
    prometheus {
      port = ${DISC_ENV_KAFKA_PROMETHEUS}
    }
  }
}

kafkaApi {

  kafkaConsumer {
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${DISC_ENV_KAFKA_CONS_BOOTSTRAP}
    // subscribe to topic "test" for... testing purposes
    topic = ${DISC_ENV_KAFKA_CONS_TOPIC}
    //If empty, a group id will be created.
    groupId = ${DISC_ENV_KAFKA_CONS_GROUPID}

    errorTopic = ${DISC_ENV_KAFKA_CONS_ERRORTOPIC}
    gracefulTimeout = ${DISC_ENV_KAFKA_CONS_TIMEOUT}
    maxPoolRecords = ${DISC_ENV_KAFKA_CONS_POOLREC}
    reconnectBackoffMsConfig = ${DISC_ENV_KAFKA_CONS_RECONNECT_BACKOFF_MS_CONFIG}
    reconnectBackoffMaxMsConfig = ${DISC_ENV_KAFKA_CONS_RECONNECT_BACKOFF_MAX_MS_CONFIG}

  }

  kafkaProducer {
    lingerMS = ${DISC_ENV_KAFKA_PROD_LINGER_MS}
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${DISC_ENV_KAFKA_PROD_BOOTSTRAP}
    errorTopic = ${DISC_ENV_KAFKA_PROD_ERRORTOPIC}
    topic = ${DISC_ENV_KAFKA_PROD_TOPIC}
    gracefulTimeout = ${DISC_ENV_KAFKA_PROD_TIMEOUT}

  }

  gremlinConf {
    maxParallelConnection = ${DISC_ENV_KAFKA_GREM_ASYNC}
  }

  batchSize = ${DISC_ENV_KAFKA_BATCH_SIZE}

  metrics {
    prometheus {
      port = ${DISC_ENV_KAFKA_PROMETHEUS}
      namespace = ${DISC_ENV_KAFKA_PROMETHEUS_NAMESPACE}
    }
  }

  healthcheck {
    enabled = ${DISC_ENV_KAFKA_HEALTHCHECK_ENABLED}
    port = ${DISC_ENV_KAFKA_HEALTHCHECK_PORT}
  }

}

redis {
  address = ${DISC_ENV_REDIS_URL}
  port = ${DISC_ENV_REDIS_PORT}
  password = ${DISC_ENV_REDIS_PWD}
}
