flush = false

core {

  threads = 3

  connector {

    hosts = "127.0.0.1"
    port = 8182

    nioPoolSize = 3 //default is available processors
    workerPoolSize = 6 //default available processors * 2

    connectionPool {
      //use -1 to use default
      minSize = 4
      maxSize = 8
      reconnectInterval = 500
      maxWaitForConnection = 6000
    }

    serializer {
      className = org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0
      config {
        ioRegistries = [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry]
      }
    }
  }
}

kafkaApi {

  kafkaConsumer {
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = "localhost:9092"
    // subscribe to topic "test" for... testing purposes
    topic = "com.ubirch.eventlog.discovery, test"
    //If empty, a group id will be created.
    groupId = "my group id"
    // gracefulTimeout = 2 //In Seconds
    errorTopic = "com.ubirch.eventlog.discovery.error"
    gracefulTimeout = 2
    maxPoolRecords = 500
    reconnectBackoffMsConfig = 50
    reconnectBackoffMaxMsConfig = 1000
  }

  kafkaProducer {
    lingerMS = 1000
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = "localhost:9092"
    errorTopic = "com.ubirch.eventlog.discovery.error"
    topic = "com.ubirch.eventlog.discovery, test"
    gracefulTimeout = 2

  }

  gremlinConf {
    maxParallelConnection = 16
  }

  metrics {
    prometheus {
      port = 9090
      namespace = "ubirch_discovery_service"
    }
  }

  healthcheck {
    enabled = true
    port = 8888
  }

}
flush = false
